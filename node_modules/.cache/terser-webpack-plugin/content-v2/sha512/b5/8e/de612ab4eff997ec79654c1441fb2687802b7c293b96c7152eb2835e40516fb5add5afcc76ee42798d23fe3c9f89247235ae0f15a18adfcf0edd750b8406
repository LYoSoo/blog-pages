{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{352:function(t,a,s){\"use strict\";s.r(a);var e=s(43),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"_1-基本匹配\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-基本匹配\"}},[t._v(\"#\")]),t._v(\" 1.基本匹配\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"正则表达式是由一些字母和数字组成的一个搜索模版。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v('​\\t例如一个正则表达式 the,  表示匹配接连的三个字母 \"the\"。')])])])]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" reg \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/the/g\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" regResult \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"The cat sat on the mat. the one\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"match\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nregResult \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('// [\"the\", \"the\"];')]),t._v(\"\\n\")])])]),s(\"blockquote\",[s(\"p\",[t._v('正则表达式是区分大小写字母的，也就是字符串\"The\" 不会被匹配')])]),t._v(\" \"),s(\"h1\",{attrs:{id:\"_2-元字符\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-元字符\"}},[t._v(\"#\")]),t._v(\" 2.元字符\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"正则表达式内置了一些特殊的模版，代表了相应的意思，也就是元字符。相当于给我们一些工具，我们借助 元字符 可以使我们的正则表达式更加简洁。\")])]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"元字符\")]),t._v(\" \"),s(\"th\",[t._v(\"描述\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\".\")]),t._v(\" \"),s(\"td\",[t._v(\"句号匹配任意单个字符 除了换行符。\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"[]\")]),t._v(\" \"),s(\"td\",[t._v(\"字符的种类，匹配方括号内的任意字符 例如： [0-9]\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"[^]\")]),t._v(\" \"),s(\"td\",[t._v(\"否定的字符种类，匹配除了方括号内部的任意字符  [^0-9]。除了0-9以外的字符\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"*\")]),t._v(\" \"),s(\"td\",[t._v(\"匹配 > = 0 个重复的在* 之前的字符  可以为0\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"+\")]),t._v(\" \"),s(\"td\",[t._v(\"匹配 > = 1个重复在+ 之前的字符   不可以0  最少为1\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"？\")]),t._v(\" \"),s(\"td\",[t._v(\"标记？之前的字符为可选\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"｛n,m｝\")]),t._v(\" \"),s(\"td\",[t._v(\"匹配num个大括号之前的字符或者字符集{ n < num < m};\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"{xyz}\")]),t._v(\" \"),s(\"td\",[t._v(\"匹配与xyz完全相等的字符串\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"|\")]),t._v(\" \"),s(\"td\",[t._v('“或\" 运算符， 匹配符号前面或者后面的字符')])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"\\\\\")]),t._v(\" \"),s(\"td\",[t._v(\"转义字符，用于匹配保留的字符 如： [ ] ( ) { } . *  + ? ^ $ \\\\ |\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"^\")]),t._v(\" \"),s(\"td\",[t._v(\"从开始行开始匹配\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"$\")]),t._v(\" \"),s(\"td\",[t._v(\"从末端开始匹配\")])])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_2-1点运算符\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1点运算符\"}},[t._v(\"#\")]),t._v(\" 2.1点运算符\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\". 在运算符中是最简单的， 它匹配任意单个字符，但是不能匹配换行符。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v('\".ar\" => The car parked in the garage, is')]),t._v(\" \"),s(\"p\",[t._v(\"arrived.\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" reg \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/.ar/g\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" regResult \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"The car parked in the garage.\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"match\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('// regResult =>  [\"car\", \"par\", \"gar\"];')]),t._v(\"\\n\")])])])])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_2-2-字符集\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2-字符集\"}},[t._v(\"#\")]),t._v(\" 2.2 字符集\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"字符集就是用方括号来指定一个集合，在方括号中可以指定字符集的范围，字符集不关心里面的顺序\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v('​\\t\"[Tt]he\" 可以用来匹配 \"the\" \"The\";')]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" reg \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/[Tt]he/g\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" regResult \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"The car parked in the garage.\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"match\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('// regResult => [\"The\", \"the\"];')]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"​\\tar[.] 用来匹配 ar. 的字符串\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" reg \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/ar[.]/g\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" regResult \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"park a car.\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"match\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('// regResult => [\"ar.\"]')]),t._v(\"\\n\")])])])])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_2-21否定字符集\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-21否定字符集\"}},[t._v(\"#\")]),t._v(\" 2.21否定字符集\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"”^“ 一般时用来表示一个字符串的开头，但是当他用在方括号内的时候，表示这个字符集是否定的，例如 [^c]ar 表示了匹配 后面跟着ar 的除了 c 的任意字符\")]),t._v(\" \"),s(\"blockquote\",[s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[t._v(\"  \\t\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" reg \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/[^c]ar/g\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \\t\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" regResult \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"car bar garge.\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"match\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \\t\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('// regResult => [\"bar\", \"gar\"];')]),t._v(\"\\n  \\t\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),s(\"span\",{pre:!0,attrs:{class:\"token template-string\"}},[s(\"span\",{pre:!0,attrs:{class:\"token template-punctuation string\"}},[t._v(\"`\")]),s(\"span\",{pre:!0,attrs:{class:\"token template-punctuation string\"}},[t._v(\"`\")])]),t._v(\"`\\n\")])])])])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_2-3-重复次数\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-3-重复次数\"}},[t._v(\"#\")]),t._v(\" 2.3 重复次数\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"​\\t上面表格提到了不同 * + ？ 三个元字符分别代表的含义。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_2-3-1-号\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-3-1-号\"}},[t._v(\"#\")]),t._v(\" 2.3.1 * 号\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"​\\t*号匹配的是在 * 之前的字符串出现 大于或者等于 0 次。\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\ta * 表示匹配 0 个或者多个以a 开头的字符\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t[a-z]* 表示匹配所有以小写字母开头的字符串\")]),t._v(\" \"),s(\"p\",[t._v(\"​    可以和表示匹配空格的 \\\\s 连在一起使用\")]),t._v(\" \"),s(\"p\",[t._v(\"​    比如： \\\\s*cat\\\\s*   匹配的就是  cat 前面和后面均有一个或者多个空格\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" reg \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/\\\\s*cat\\\\s*/g\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" regResult \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"   cat   iscatff a\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"match\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('// regResult => [\"   cat  \", \"cat\"];')]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_2-3-2-号\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-3-2-号\"}},[t._v(\"#\")]),t._v(\" 2.3.2 +号\")]),t._v(\" \"),s(\"blockquote\",[s(\"ul\",[s(\"li\",[t._v(\"号用来匹配 + 号之前的字符出现 > = 1次\")])]),t._v(\" \"),s(\"p\",[t._v('c.+t      =>   \"cafft cft\"    [\"cafft cft\"]')]),t._v(\" \"),s(\"p\",[t._v('c[a]+t   =>  \"caaaat cfat cat\" => [\"caaaat\", \"cat\"]')]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" reg \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/c[a]+t/g\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" regResult \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"caaat ct caft cat\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"match\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('// regResult => [\"caaat\", \"cat\"]\\t此时无法匹配 ct')]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_2-3-3-？号\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-3-3-？号\"}},[t._v(\"#\")]),t._v(\" 2.3.3 ？号\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"​\\t正则表达式中 元字符 ？ 表示在符号前面的字符为可选，即可以出现 0 - 1 次\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t例如 [T]?he 可以匹配 字符 he 和 The\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" reg \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/[T]he?/g\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" regResult \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"The car is parked in the garage.\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('// regResult => [\"The\", \"the\"];')]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_2-4-｛｝号\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-4-｛｝号\"}},[t._v(\"#\")]),t._v(\" 2.4 ｛｝号\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"​\\t正则表达式中｛｝是一个量词，用来限定一个或者一组字符串可以重复出现的次数。\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t[0-9]{3,5} 表示匹配最少3位 最多5位的 0-9的数字。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" reg \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/[0-9]{3,5}/g\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" regResult \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"12.1234 12.2 124.244 1234123\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"match\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('// regResult => [\"1234\", \"124\", \"244\", \"12341\"];')]),t._v(\"\\n\\n\")])])]),s(\"p\",[t._v(\"｛3｝则表示重复3次    {3, } 表示最少3次\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_2-5-（-）-特征标群\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-5-（-）-特征标群\"}},[t._v(\"#\")]),t._v(\" 2.5 （...） 特征标群\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"​\\t特征标群是一组写在 \"),s(\"code\",[t._v(\"(...)\")]),t._v(\" 中的子模式。\"),s(\"code\",[t._v(\"(...)\")]),t._v(\" 中包含的内容将会被看成一个整体，和数学中    小括号（ ）的作用相同。例如, 表达式 \"),s(\"code\",[t._v(\"(ab)*\")]),t._v(\" 匹配连续出现 0 或更多个 \"),s(\"code\",[t._v(\"ab\")]),t._v(\"。如果没有使用 \"),s(\"code\",[t._v(\"(...)\")]),t._v(\" ，那么表达式 \"),s(\"code\",[t._v(\"ab*\")]),t._v(\" 将匹配连续出现 0 或更多个 \"),s(\"code\",[t._v(\"b\")]),t._v(\" 。再比如之前说的 \"),s(\"code\",[t._v(\"{}\")]),t._v(\" 是用来表示前面一个字符出现指定次数。但如果在 \"),s(\"code\",[t._v(\"{}\")]),t._v(\" 前加上特征标群 \"),s(\"code\",[t._v(\"(...)\")]),t._v(\" 则表示整个标群内的字符重复 N 次。\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"我们可以在 ( ) 中用字符 | 表示 或\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" reg \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/(a|b|c)ar/g\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" regResult \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"aar bar car dar ccar\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"match\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('// regResult => [\"aar\", \"bar\", \"car\", \"car\"]')]),t._v(\"\\n\\n\")])])])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_2-6-运算符\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-6-运算符\"}},[t._v(\"#\")]),t._v(\" 2.6 | 运算符\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"​\\t表示或 用来判断条件\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t(T|t)he | car    用来匹配的是 ( T | t)he 或者  car\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" reg \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/(T|t)he|car/g\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" regResult \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"The car is the one\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"match\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('// regResult =>  [\"The\", \"car\", \"the\"];')]),t._v(\"\\n\\n\")])])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"_2-7转码特殊字符\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-7转码特殊字符\"}},[t._v(\"#\")]),t._v(\" 2.7转码特殊字符\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"​\\t反斜线 \\\\ 在表达式中用于转码紧跟其后的字符， 用于指定 \"),s(\"code\",[t._v(\"{ } [ ] / \\\\ + * . $ ^ | ?\")]),t._v(\" 这些特殊字符。如果想要匹配这些特殊字符则要在其前面加上反斜线 \"),s(\"code\",[t._v(\"\\\\\")]),t._v(\"。\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t例如 \"),s(\"code\",[t._v(\".\")]),t._v(\"是用来匹配除换行符外所有字符的，如果想要匹配句子中的 \"),s(\"code\",[t._v(\".\")]),t._v(\" 则要写成 \"),s(\"code\",[t._v(\"\\\\.\")]),t._v(\" 以下这个例子 \"),s(\"code\",[t._v(\"\\\\.?\")]),t._v(\"是选择性匹配\"),s(\"code\",[t._v(\".\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" reg \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t._v(\"/(f|c|m)at\\\\.?/g\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" regResult \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"The fat cat sat on the mat.\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"match\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"reg\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('// regResult => [\"fat\", \"cat\", \"mat.\"]')]),t._v(\"\\n\\n\")])])])])])}),[],!1,null,null,null);a.default=r.exports}}]);","extractedComments":[]}